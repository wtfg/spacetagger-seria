package it.insidecode.spacetagger.framework.level;


import it.insidecode.spacetagger.PropertiesManager;
import it.insidecode.spacetagger.framework.Framework;
import it.insidecode.spacetagger.framework.Scene;
import it.insidecode.spacetagger.logic.Enemy;
import it.insidecode.spacetagger.path.LineDirection;
import it.insidecode.spacetagger.path.LinePath;
import it.insidecode.spacetagger.util.SimpleCallback;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Vector2;

/**
 * Prima scenetta
 * @author Seria.1616892
 *
 */
public class Scene01 extends Scene {
	public static final String SCENE_NAME = "Scene 1 - Simple Enemies";

	/**
	 * Costruttore
	 * @param framework
	 */
	public Scene01(Framework framework) {
		super(framework);
	}

	public String getName() {
		return SCENE_NAME;
	}

	/**
	 * Init scena
	 */
	@Override
	public void init() {
		Gdx.app.log(getName(), "init");
		
		framework.setStageMusic(PropertiesManager.getParameter("stage1Music"));
		
		EnemySimple f = new EnemySimple(framework, new Vector2(100,750));
		f.setPath(new LinePath(LineDirection.DOWN, 300));
		EnemySimple g = new EnemySimple(framework, new Vector2(200,650));
		g.setPath(new LinePath(LineDirection.DOWN, 300));
		EnemySimple h = new EnemySimple(framework, new Vector2(300,750));
		h.setPath(new LinePath(LineDirection.DOWN, 300));
		EnemySimple i = new EnemySimple(framework, new Vector2(100,750));
		i.setPath(new DownSlidePath(200,300, LineDirection.RIGHT));
		EnemySimple j = new EnemySimple(framework, new Vector2(200,650));
		j.setPath(new LinePath(LineDirection.DOWN, 100));
		
		f.activate();
		g.activate();
		h.activate();
		i.activate();
		j.activate();
		
		postEnemies(new Enemy[]{new EnemyKamikaze(framework, new Vector2(200,650))}, 2);
		Nebula2 n = new Nebula2(framework, new Vector2(10,750));
		n.activate();
		
		
	}
	
	/**
	 * Immette dei nemici dopo un numero di secondi
	 * Se la navicella muore non c'e il problema del callback
	 * 
	 * @param g	array di nemici da postare
	 * @param delaySeconds	numero di secondi di delay
	 */
	public void postEnemies(final Enemy[] g, int delaySeconds){
		
		countDown(1000*delaySeconds, new SimpleCallback() {
			@Override
			public void onComplete() {
				for(Enemy f : g){
					f.activate();
				}

			}
		});
	}
	
	
	
	
	@Override
	public void dispose() {
		Gdx.app.log(getName(), "dispose");
	}
	
	

	public void update(float delta) {
		
		if (framework.getGameEngine().getEnemies().isEmpty()){
			getLevel().goToNextScene();
		}

		super.update(delta);
	}

}
