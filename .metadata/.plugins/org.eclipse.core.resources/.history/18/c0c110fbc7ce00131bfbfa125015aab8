package it.insidecode.spacetagger.framework.level;

import it.insidecode.spacetagger.PropertiesManager;
import it.insidecode.spacetagger.framework.Framework;
import it.insidecode.spacetagger.graphics.Animation;
import it.insidecode.spacetagger.graphics.AnimationType;
import it.insidecode.spacetagger.graphics.HorizontalBar;
import it.insidecode.spacetagger.logic.Enemy;

import com.badlogic.gdx.math.Vector2;

/**
 * La testa del serpentone
 * 
 * @author Seria.1616892
 * 
 */
public class EnemySnakeHead extends EnemySimple {

	private static final int SCORE = 10000;
	private static final String fileName = "enemyHead";
	// barra
	private static final Vector2 barPos = new Vector2(10,-20);
	private static final int barWidth = 40;
	private static final int barHeight = 5;
	// per spawnare i nemici
	private static final int topScreen = 650;
	private static final int deltaSpawn = 60;
	
	private HorizontalBar b;
	private Framework framework;
	private float DeltaY = 30;
	

	/**
	 * 
	 * @param f
	 *            istanza del framework corrente
	 * @param position
	 *            un Vector2 che indica la posizione nella quale il nemico va
	 *            spawnato
	 *  @param energy
	 *            La vita del nemico
	 */
	public EnemySnakeHead(Framework f, Vector2 position, float energy) {
		super(f, position, energy, SCORE);
		setCenter(position);
		framework = f;
		b = new HorizontalBar(framework.getGameEngine(), barPos, barWidth, barHeight, energy);
		
		init();
	}
	
	public void setDeltaY(float y){
		DeltaY = y;
	}
	
	
	public void chainEnemies(int enemyNum){
		Enemy old = this;
		for(int i = 0; i < enemyNum; i++){
			EnemySnakeTail e = new EnemySnakeTail(framework, new Vector2(getCenter().x, topScreen + i*deltaSpawn), enemyNum-i);
			ChainPath c = new ChainPath(old, e);
			c.setDeltaY(DeltaY);
			e.setPath(c);
			e.activate();
			old = e;
		}
	}
	/**
	 * Imposta i parametri grafici in automatico
	 */
	public void init(){
		setAnimation(Animation.createAnimation(PropertiesManager.getParameter(fileName),AnimationType.LOOP));
		setShot(EnemyShot.class);
		setShotDecorator(BorgShotDecorator.class);
		addChildEntity(b);
		b.activate();
	}
	
	/**
	 * Update della barra
	 */
	@Override
	public void update(float delta){
		b.setEnergy(getEnergy());
		super.update(delta);
	}
	
	/**
	 * Distruzione della barra
	 */
	@Override
	public void destroy(){
		b.destroy();
		framework.getGameEngine().getScoreManager().increaseScore(SCORE);
		super.destroy();
	}


}
