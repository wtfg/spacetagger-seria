package it.insidecode.spacetagger.framework.level;


import it.insidecode.spacetagger.PropertiesManager;
import it.insidecode.spacetagger.framework.Framework;
import it.insidecode.spacetagger.framework.GfxEnemy;
import it.insidecode.spacetagger.graphics.HorizontalBar;
import it.insidecode.spacetagger.logic.Depth;
import it.insidecode.spacetagger.logic.Direction;


import com.badlogic.gdx.math.Vector2;

/**
 * Un nemico grosso e cattivo
 * 
 * @author Seria.1616892
 * 
 */
public class EnemyBig1 extends GfxEnemy {

	/**
	 * Costanti
	 */
	private static final float ENERGY = 30;
	private static final int SCORE = 3000;
	private static final float DAMAGE = 3f;
	private static final float SPEED = 0.5f;
	private static final String fileName = "enemyBig1";
	private static final String explosionName = "xplosion";
	
	/**
	 * Costanti
	 */
	private static final Vector2 barPos = new Vector2(50,-20);
	private static final int barWidth = 70;
	private static final int barHeight = 5;
	private int SHOOT_UPDATE_TIME = 100;
	private Framework framework;
	private static HorizontalBar bar;
	
	// t e limit servono per aggiornare il tempo di sparo
	private int t;
	private int limit = SHOOT_UPDATE_TIME;

	/**
	 * 
	 * @param f
	 *            istanza del framework corrente
	 * @param position
	 *            un Vector2 che indica la posizione nella quale il nemico va
	 *            spawnato
	 */
	public EnemyBig1(Framework f, Vector2 position) {
		super(f, position, ENERGY, SCORE, DAMAGE,
				SPEED, PropertiesManager.getParameter(fileName),
				PropertiesManager.getParameter(explosionName));
		framework = f;
		
		setShot(EnemyShot.class);
		setShotDecorator(BorgShotDecorator.class);
		
		bar = new HorizontalBar(framework.getGameEngine(), barPos, barWidth, barHeight, ENERGY);
		addChildEntity(bar);
		bar.activate();
	}
	

	/**
	 * Comportamento classico
	 */
	@Override
	public void update(float delta) {
		super.update(delta);		
		bar.setEnergy(getEnergy());
		computeMove();
		t++;
		if (t > limit) {
			limit = SHOOT_UPDATE_TIME;
			t = 0;
			if (isAlive()){
				spitEnemies();
			}
		}

	}
	
	/**
	 * Effettua le mosse
	 */
	
	private void computeMove(){
		float deltaX = framework.getShip().getCenter().x - this.getCenter().x;
		if(deltaX>10)
			move(Direction.RIGHT);
		else if(deltaX<-10)
			move(Direction.LEFT);
	}
	
	private void spitEnemies(){
		
		EnemySnakeTail k = new EnemySnakeTail(framework, getPosition(), 1);
		k.setPath(new FollowShipPath(framework, k));
		k.setDepth(Depth.ENTITY1);
		k.activate(); 
		
		EnemySnakeTail i = new EnemySnakeTail(framework, getPosition().add(120,0), 1);
		i.setSpeed(3f);
		i.setPath(new FollowShipPath(framework, i));
		i.setDepth(Depth.ENTITY1);
		i.activate();
	}

	@Override
	public void destroy(){
		bar.destroy();
		framework.getGameEngine().getScoreManager().increaseScore(SCORE);
		super.destroy();
	}
}
