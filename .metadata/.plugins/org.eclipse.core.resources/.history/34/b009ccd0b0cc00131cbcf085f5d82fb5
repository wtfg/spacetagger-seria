package it.insidecode.spacetagger.framework.level;

import it.insidecode.spacetagger.framework.Framework;
import it.insidecode.spacetagger.framework.GfxEnemy;
import it.insidecode.spacetagger.framework.Scene;
import it.insidecode.spacetagger.logic.Enemy;
import it.insidecode.spacetagger.path.LineDirection;
import it.insidecode.spacetagger.util.SimpleCallback;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Vector2;

public class Scene05 extends Scene {
	public static final String SCENE_NAME = "Scene 5 - Harder with these Paths";

	
	public Scene05(Framework framework) {
		super(framework);
	}

	public String getName() {
		return SCENE_NAME;
	}

	@Override
	public void init() {
		Gdx.app.log(getName(), "init");
		
		
		
		
		EnemyBerzerk g = new EnemyBerzerk(framework, new Vector2(50,0));
		EnemyBerzerk h = new EnemyBerzerk(framework, new Vector2(-50,0));	
		EnemyCluster f = new EnemyCluster(framework, new Vector2(100,650), new GfxEnemy[]{g, h});
		f.setPath(new FollowShipPath(framework, f));
		f.activate();
		
	
		EnemyBerzerk j = new EnemyBerzerk(framework, new Vector2(50,0));
		EnemyBerzerk k = new EnemyBerzerk(framework, new Vector2(-50,0));
		EnemyCluster i = new EnemyCluster(framework, new Vector2(300,650), new GfxEnemy[]{j, k});
		i.setPath(new FollowShipPath(framework, i));
		i.activate();
		
		
		EnemyBerzerk l = new EnemyBerzerk(framework, new Vector2(100,650));
		l.setPath(new DownSlidePath(200,500, LineDirection.RIGHT));
		EnemyBerzerk m = new EnemyBerzerk(framework, new Vector2(300,750));
		m.setPath(new DownSlidePath(200,500, LineDirection.LEFT));
		EnemyBerzerk n = new EnemyBerzerk(framework, new Vector2(100,850));
		n.setPath(new DownSlidePath(200,500, LineDirection.RIGHT));
		EnemyBerzerk o = new EnemyBerzerk(framework, new Vector2(300,950));
		o.setPath(new DownSlidePath(200,500, LineDirection.RIGHT));
		
		postEnemies(new Enemy[]{l, m, n, o}, 2);
		
		Planet2 p = new Planet2(framework, new Vector2(320,750));
		p.activate();
		
		
	}
	

	/**
	 * Immette dei nemici dopo un numero di secondi
	 * Se la navicella muore non c'e il problema del callback
	 * 
	 * @param g	array di nemici da postare
	 * @param delaySeconds	numero di secondi di delay
	 */
	public void postEnemies(final Enemy[] g, int delaySeconds){
		
		countDown(1000*delaySeconds, new SimpleCallback() {
			@Override
			public void onComplete() {
				for(Enemy f : g){
					f.activate();
				}

			}
		});
	}
	
	
	

	@Override
	public void dispose() {
		Gdx.app.log(getName(), "dispose");
	}
	
	

	public void update(float delta) {
		
		if (framework.getGameEngine().getEnemies().isEmpty()){
			getLevel().goToNextScene();
		}

		super.update(delta);
	}

}
