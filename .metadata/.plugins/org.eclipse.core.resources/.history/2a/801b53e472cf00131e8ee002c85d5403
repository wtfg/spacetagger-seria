package it.insidecode.spacetagger.framework.level;


import it.insidecode.spacetagger.PropertiesManager;
import it.insidecode.spacetagger.framework.Framework;
import it.insidecode.spacetagger.framework.GfxEnemy;
import it.insidecode.spacetagger.logic.Direction;
import it.insidecode.spacetagger.logic.DynamicPhysicsEntity;
import it.insidecode.spacetagger.logic.Ship;
import it.insidecode.spacetagger.logic.PowerUp;
import it.insidecode.spacetagger.shots.Shot;
import it.insidecode.spacetagger.util.SimpleCallback;

import com.badlogic.gdx.math.Vector2;

/**
 * Un asteroide stupido che rilascia powerup
 * @author Seria.1616892
 *
 */
public class Blasteroid extends GfxEnemy {

	/**
	 * Costanti
	 */
	private static final float ENERGY = 3;
	private static final int SCORE = 500;
	private static final float DAMAGE = 1;
	private static final float SPEED = .5f;

	private static boolean isDestroyed = false;
	private static PowerUp p;
	private static final String fileName = "blasteroid";
	private static final String explosionName = "xplosion";

	private Framework framework;

	/**
	 * Costruttore di un asteroide, inizializza l'oggetto
	 * nella posizione descritta dal costruttore
	 * 
	 * @param f				istanza del framework corrente
	 * @param position		posizione asteroide
	 */
	public Blasteroid(final Framework f, Vector2 position) {
		super(f, position, ENERGY, SCORE, DAMAGE,
				SPEED, PropertiesManager.getParameter(fileName),
				PropertiesManager.getParameter(explosionName),
				new SimpleCallback() {
					@Override
					public void onComplete() {
						p.activate();
						isDestroyed = true;
					}
				});
		framework = f;

	}
	
	/**
	 * Movimento aggiornato nell'update
	 */
	@Override
	public void update(float delta) {
		super.update(delta);
		move(Direction.DOWN);
	}
	
	/**
	 * Restituisce un valore booleano se e' effettivamente rimosso dalla vista
	 * @return	true se e' rimosso realmente dal gioco
	 */
	public boolean isDestroyed(){
		return isDestroyed;
	}

	/**
	 * Instanzia il powerup e muore
	 */
	@Override
	public void destroy() {
		p = new ShieldPowerUp(framework, getCenter());
		super.destroy();
	}

	/**
	 * Un asteroide del genere subisce solo colpi dagli spari
	 */
	public void handleContact(DynamicPhysicsEntity x){
		if(x instanceof Ship)
			x.destroy();
		if(x instanceof Shot){
			damage(x.getDamageValue());
			x.destroy();
		}
	}

}
